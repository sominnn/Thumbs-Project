# Thumbs-Project

<Docker 다운로드 및 JupyterLab 시작>
이 과정에서는 "Headless" 구성에서 Jetson Nano 개발자 키트를 실행합니다. 즉, 모니터를 Jetson Nano 개발자 키트에 직접 연결하지 않아도 된다.
이 방법은 Jetson Nano의 메모리 리소스를 절약하고 추가 하드웨어(예: 모니터, 키보드 및 마우스)에 대한 요구 사항을 제거하는 추가 이점이 있다.

또한 "USB 장치 모드"를 사용하여 구성을 더욱 단순화할 것입니다. 이 모드에서 Jetson Nano 개발자 키트는 USB 케이블을 통해 컴퓨터에 직접 연결된다.
이렇게 하면 Jetson Nano에서 네트워크 연결이 필요하지 않으며 네트워크에서 IP 주소를 확인할 필요가 없다. 이 모드에서는 항상 192.168.55.1이다.

다음 단계에서는 젯슨 나노와 같은 임베디드 시스템과 통신하는 일반적인 방법인 SSH protocol을 사용하여, Nano를 부팅하고 컴퓨터에서 로그온한다. 
과정 노트북은 도커 컨테이너 환경에 이미 포함되어 있으며, 도커 컨테이너 이미지는 인터넷을 통해 다운로드 후 마이크로 SD 카드에 저장해 두었다.


<설정 단계>
1. 플래시된 JetPack microSD 카드와 전원 공급 장치를 연결한다(4G 키트용 DC 배럴 잭, 2G 키트용 USBC 커넥터). Jetson Nano 개발자 키트의 전원이 켜지고 자동으로 부팅된다.
2. 개발자 키트의 전원이 켜지면 Micro-USB 커넥터 옆에 있는 녹색 LED가 켜진다. 30초 정도 기다린다.
3. 그런 다음 Jetson Nano 개발자 키트의 마이크로 USB 포트에서 컴퓨터의 USB 포트로 USB 케이블을 연결한다.
4. USB 카메라를 Jetson Nano의 USB 포트에 연결. (대체 CSI 카메라를 사용하는 경우 CSI 포트에 연결하십시오.)
5. 과정 노트북이 들어 있는 Docker 컨테이너를 처음으로 다운로드하는 경우 이더넷 포트 또는 호환되는 WiFi 장치를 사용하여 Nano를 인터넷에 연결한다.
6. 컴퓨터에서 Mac 또는 Linux를 사용하는 경우 터미널 창을 열고 Windows를 사용하는 경우 PowerShell 창을 엽다.
7. 터미널에서 다음 명령을 사용하여 Jetson Nano에 로그온한다. 여기서 <username>은 운영 체제 구성 중에 Nano에서 설정한 값이다.
- 명령어: ssh <username>@192.168.55.1

8. 그다음 구성한 비밀번호를 입력한다.
9. 로그인한 Jetson Nano 터미널에서 다음 명령을 사용하여 과정에 대한 데이터 디렉터리를 추가합니다.
- 명령어: mkdir -p ~/nvdli-data

10. 다음 명령으로 Docker 컨테이너를 실행합니다. 여기서 <tag>는 과정 버전과 Jetson Nano JetPack L4T 운영 체제 버전의 조합입니다(형식은 <tag> = <course_version>-<L4T_version>).
태그 목록은 코스 NVIDIA NGC 클라우드 페이지에서 찾을 수 있습니다.
- 명령어: sudo docker run --runtime nvidia -it --rm --network host \
    --volume ~/nvdli-data:/nvdli-nano/data \
    --device /dev/video0 \
    nvcr.io/nvidia/dli/dli-nano-ai:<tag>
    
11. 이 단계에서 재사용 가능한 스크립트를 생성하고 실행하려면 다음을 시도한다(예시 태그 표시).
# create a reusable script
echo "sudo docker run --runtime nvidia -it --rm --network host \
    --volume ~/nvdli-data:/nvdli-nano/data \
    --device /dev/video0 \
    nvcr.io/nvidia/dli/dli-nano-ai:v2.0.2-r32.7.1" > docker_dli_run.sh

# make the script executable
chmod +x docker_dli_run.sh

# run the script
./docker_dli_run.sh

12. USB 웹캠 대신 대체 CSI 카메라를 사용하는 경우 docker run 명령에 --volume /tmp/argus_socket:/tmp/argus_socket을 추가합니다.
예시: # create a reusable script
echo "sudo docker run --runtime nvidia -it --rm --network host \
    --volume ~/nvdli-data:/nvdli-nano/data \
    --volume /tmp/argus_socket:/tmp/argus_socket \
    --device /dev/video0 \
    nvcr.io/nvidia/dli/dli-nano-ai:v2.0.2-r32.7.1" > docker_dli_run.sh

# make the script executable
chmod +x docker_dli_run.sh

# run the script
./docker_dli_run.sh

13. 대체 CSI 카메라와 2GB 버전을 사용하는 경우 docker run 명령에 --memory=500M --memory-swap=4G도 추가한다.
예시: # create a reusable script
echo "sudo docker run --runtime nvidia -it --rm --network host \
    --memory=500M --memory-swap=4G \
    --volume ~/nvdli-data:/nvdli-nano/data \
    --volume /tmp/argus_socket:/tmp/argus_socket \
    --device /dev/video0 \
    nvcr.io/nvidia/dli/dli-nano-ai:v2.0.2-r32.7.1" > docker_dli_run.sh

# make the script executable
chmod +x docker_dli_run.sh

# run the script
./docker_dli_run.sh


<JupyterLab 서버에 로그인>
1. 다음 링크 주소 열기: 192.168.55.1:8888
Jetson Nano에서 실행되는 JupyterLab 서버는 처음 로그인 프롬프트와 함께 열린다.
2. 비밀번호를 입력한다: dlinano

그러면 이 화면이 표시된다.
https://github.com/sominnn/Thumbs-Project/issues/1#issue-1457060273


<Hello Camera 노트북 열기>
JupyterLab 인터페이스는 Jupyter 대화형 노트북에 대한 액세스를 제공하는 대시보드이다.
표시되는 첫 번째 보기에는 왼쪽의 디렉토리 트리와 오른쪽의 "실행 프로그램" 페이지가 포함됩니다.
"Hello Camera" 노트북을 열려면:
1. 두 번 클릭하여 hello_camera 폴더로 이동합니다.
2.usb_camera.ipynb 노트북을 두 번 클릭하여 엽니다.


<JupyterLab>
이 과정에서 Docker 컨테이너는 포트 8888에서 JupyterLab 서버를 실행하도록 구성되었습니다.
컨테이너를 부팅하고 해당 포트에서 Jetson Nano IP 주소로 브라우저를 열면 JupyterLab 인터페이스가 표시됩니다.

JupyterLab 인터페이스는 대화형 Jupyter 노트북에 대한 액세스와 Ubuntu 운영 체제에 대한 터미널 창에 대한 액세스를 제공하는 대시보드입니다.
표시되는 첫 번째 보기에는 상단의 메뉴 표시줄, 왼쪽 사이드바의 디렉토리 트리 및 처음에 "런처" 페이지에 열려 있는 기본 작업 영역이 포함됩니다.

사용 가능한 모든 기능 및 메뉴 작업에 대한 자세한 내용은 JupyterLab 인터페이스 문서에서 확인할 수 있습니다.
다음은 이 과정에서 특히 유용한 몇 가지 주요 기능이다.

File browser: 왼쪽 사이드바의 파일 브라우저를 사용하면 Docker 컨테이너 파일 구조를 탐색할 수 있습니다. 노트북이나 파일을 두 번 클릭하면 기본 작업 영역에서 열립니다.

Jupyter notebooks: 이 과정에서 사용되는 대화형 노트북의 파일 확장자는 ".ipynb"입니다. 파일 브라우저에서 노트북을 두 번 클릭하면 기본 작업 영역에서 노트북이 열리고 프로세스가 시작된다.
노트북은 텍스트와 코드 "셀"로 구성됩니다. 코드 셀이 "실행"되면 노트북 상단의 실행 버튼 또는 키보드 단축키 [CTRL][ENTER]를 클릭하여 셀의 코드 블록이 실행되고 출력이 있는 경우 출력이 나타난다.
노트북의 셀 아래. 각 실행 셀의 왼쪽에는 괄호 안에 "실행 횟수" 또는 "프롬프트 번호"가 있습니다. 셀을 실행하는 데 몇 초 이상 걸리는 경우 별표가 표시되어 셀이 실행을 완료하지 않았음을 나타난다.
해당 셀의 처리가 완료되면 괄호 안에 숫자가 표시됩니다.

Kernel operations: 실행 중인 각 노트북의 커널은 사용자 코드를 실행하는 별도의 프로세스입니다. 파일 브라우저에서 노트북을 열면 커널이 자동으로 시작됩니다.
기본 메뉴 표시줄의 커널 메뉴에는 주기적으로 사용해야 하는 커널을 종료하거나 다시 시작하는 명령이 포함되어 있습니다. 커널 종료 후에는 코드 셀을 실행할 수 없습니다.
커널이 다시 시작되면 가져온 패키지, 변수 할당 등과 관련된 모든 메모리가 손실됩니다.

Cell tabs: 셀을 마우스 오른쪽 버튼으로 클릭하고 "출력용 새 보기 만들기"를 선택하여 기본 작업 영역의 새 창 탭으로 셀을 이동할 수 있습니다.
이렇게 하면 특정 셀을 계속 보면서 JupyterLab 노트북을 계속 아래로 스크롤할 수 있습니다. 카메라 보기가 포함된 셀에서 특히 유용하다.

Terminal window: Docker 컨테이너 OS의 터미널 창에서 직접 작업할 수 있습니다. 실행기 페이지에서 "기타" 아래의 터미널 아이콘을 클릭합니다.
런처 페이지를 불러오려면 더 이상 보이지 않는 경우 왼쪽 사이드바 상단에 있는 "+" 아이콘을 클릭한다.
